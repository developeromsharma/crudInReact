// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using crudInReact.Server.DataServices;

#nullable disable

namespace crudInReact.Server.Migrations
{
    [DbContext(typeof(CourseDbContext))]
    [Migration("20250520115314_AddUserCourseRelation")]
    partial class AddUserCourseRelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("crudInReact.Server.Models.CourseModel", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("CourseRating")
                        .HasColumnType("float");

                    b.HasKey("CourseId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CourseCode = "NET101",
                            CourseName = "ASP.NET Core Web API",
                            CourseRating = 4.5
                        },
                        new
                        {
                            CourseId = 2,
                            CourseCode = "REACT201",
                            CourseName = "React with TypeScript",
                            CourseRating = 4.7999999999999998
                        },
                        new
                        {
                            CourseId = 3,
                            CourseCode = "SQL301",
                            CourseName = "SQL Server Basics",
                            CourseRating = 4.2000000000000002
                        });
                });

            modelBuilder.Entity("crudInReact.Server.Models.UserCourseModel", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCoursesModel");
                });

            modelBuilder.Entity("crudInReact.Server.Models.UserModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsAdmin = true,
                            Password = "admin@98",
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            IsAdmin = false,
                            Password = "user@98",
                            Username = "user"
                        });
                });

            modelBuilder.Entity("crudInReact.Server.Models.UserCourseModel", b =>
                {
                    b.HasOne("crudInReact.Server.Models.CourseModel", "CourseModel")
                        .WithMany("UserCoursesModel")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("crudInReact.Server.Models.UserModel", "UserModel")
                        .WithMany("UserCoursesModel")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseModel");

                    b.Navigation("UserModel");
                });

            modelBuilder.Entity("crudInReact.Server.Models.CourseModel", b =>
                {
                    b.Navigation("UserCoursesModel");
                });

            modelBuilder.Entity("crudInReact.Server.Models.UserModel", b =>
                {
                    b.Navigation("UserCoursesModel");
                });
#pragma warning restore 612, 618
        }
    }
}
